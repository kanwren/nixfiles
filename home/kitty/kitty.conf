# vim:fileencoding=utf-8:ft=conf:foldmethod=marker

#: Fonts {{{

# font_family      monospace
# bold_font        auto
# italic_font      auto
# bold_italic_font auto

font_family      Fira Mono
italic_font      Fira Mono Italic
bold_font        Fira Mono Bold
bold_italic_font Fira Mono Bold Italic

#: Font size (in pts)
font_size 10.0

#: Amount that font size changes on increasing/decreasing
# font_size_delta 2

#: Change the size of each character cell kitty renders. You can use
#: either numbers, which are interpreted as pixels or percentages
#: (number followed by %), which are interpreted as percentages of the
#: unmodified values. You can use negative pixels or percentages less
#: than 100% to reduce sizes (but this might cause rendering
#: artifacts).

# adjust_line_height  0
# adjust_column_width 0

#: Map the specified unicode codepoints to a particular font. Useful
#: if you need special rendering for some symbols, such as for
#: Powerline. Avoids the need for patched fonts. Each unicode code
#: point is specified in the form U+<code point in hexadecimal>. You
#: can specify multiple code points, separated by commas and ranges
#: separated by hyphens. symbol_map itself can be specified multiple
#: times. Syntax is:
#:     symbol_map codepoints Font Family Name

# symbol_map U+E0A0-U+E0A2,U+E0B0-U+E0B3 PowerlineSymbols

#: Choose how you want to handle multi-character ligatures. The
#: default is to always render them.  You can tell kitty to not render
#: them when the cursor is over them by using cursor to make editing
#: easier, or have kitty never render them at all by using always, if
#: you don't like them. The ligature strategy can be set per-window
#: either using the kitty remote control facility or by defining
#: shortcuts for it in kitty.conf, for example:
#:     map alt+1 disable_ligatures_in active always
#:     map alt+2 disable_ligatures_in all never
#:     map alt+3 disable_ligatures_in tab cursor

# disable_ligatures never

#: Change the sizes of the lines used for the box drawing unicode
#: characters These values are in pts. They will be scaled by the
#: monitor DPI to arrive at a pixel value. There must be four values
#: corresponding to thin, normal, thick, and very thick lines.

# box_drawing_scale 0.001, 1, 1.5, 2

#: }}}

#: Cursor customization {{{

#: Default cursor color

# cursor #cccccc

#: Choose the color of text under the cursor. If you want it rendered
#: with the background color of the cell underneath instead, use the
#: special keyword: background

# cursor_text_color #111111

#: The cursor shape can be one of (block, beam, underline)

# cursor_shape block

#: The interval (in seconds) at which to blink the cursor. Set to zero
#: to disable blinking. Negative values mean use system default. Note
#: that numbers smaller than repaint_delay will be limited to
#: repaint_delay.

# cursor_blink_interval -1

#: Stop blinking cursor after the specified number of seconds of
#: keyboard inactivity.  Set to zero to never stop blinking.

# cursor_stop_blinking_after 15.0

#: }}}

#: Scrollback {{{

#: Number of lines of history to keep in memory for scrolling back.
#: Memory is allocated on demand. Negative numbers are (effectively)
#: infinite scrollback. Note that using very large scrollback is not
#: recommended as it can slow down resizing of the terminal and also
#: use large amounts of RAM.

# scrollback_lines 2000

#: Program with which to view scrollback in a new window. The
#: scrollback buffer is passed as STDIN to this program. If you change
#: it, make sure the program you use can handle ANSI escape sequences
#: for colors and text formatting. INPUT_LINE_NUMBER in the command
#: line above will be replaced by an integer representing which line
#: should be at the top of the screen.

# scrollback_pager less --chop-long-lines --RAW-CONTROL-CHARS +INPUT_LINE_NUMBER

#: Separate scrollback history size, used only for browsing the
#: scrollback buffer (in MB). This separate buffer is not available
#: for interactive scrolling but will be piped to the pager program
#: when viewing scrollback buffer in a separate window. The current
#: implementation stores one character in 4 bytes, so approximatively
#: 2500 lines per megabyte at 100 chars per line. A value of zero or
#: less disables this feature. The maximum allowed size is 4GB.

# scrollback_pager_history_size 0

#: Modify the amount scrolled by the mouse wheel. Note this is only
#: used for low precision scrolling devices, not for high precision
#: scrolling on platforms such as macOS and Wayland. Use negative
#: numbers to change scroll direction.

# wheel_scroll_multiplier 5.0

#: Modify the amount scrolled by a touchpad. Note this is only used
#: for high precision scrolling devices on platforms such as macOS and
#: Wayland. Use negative numbers to change scroll direction.

# touch_scroll_multiplier 1.0

#: }}}

#: Mouse {{{

#: Hide mouse cursor after the specified number of seconds of the
#: mouse not being used. Set to zero to disable mouse cursor hiding.
#: Set to a negative value to hide the mouse cursor immediately when
#: typing text.

mouse_hide_wait 3.0

#: The color and style for highlighting URLs on mouse-over. url_style
#: can be one of: none, single, double, curly

# url_color #0087bd
# url_style curly

#: The modifier keys to press when clicking with the mouse on URLs to
#: open the URL

# open_url_modifiers kitty_mod

#: The program with which to open URLs that are clicked on. The
#: special value default means to use the operating system's default
#: URL handler.

# open_url_with default

#: Copy to clipboard or a private buffer on select. With this set to
#: clipboard, simply selecting text with the mouse will cause the text
#: to be copied to clipboard. Useful on platforms such as macOS that
#: do not have the concept of primary selections. You can instead
#: specify a name such as a1 to copy to a private kitty buffer
#: instead. Map a shortcut with the paste_from_buffer action to paste
#: from this private buffer. For example:

# copy_on_select no

#: Note that copying to the clipboard is a security risk, as all
#: programs, including websites open in your browser can read the
#: contents of the system clipboard.

#:     map cmd+shift+v paste_from_buffer a1

#: Remove spaces at the end of lines when copying to clipboard. A
#: value of smart will do it when using normal selections, but not
#: rectangle selections. always will always do it.

# strip_trailing_spaces never

#: The modifiers to use rectangular selection (i.e. to select text in
#: a rectangular block with the mouse)

# rectangle_select_modifiers ctrl+alt

#: The modifiers to override mouse selection even when a terminal
#: application has grabbed the mouse

# terminal_select_modifiers shift

#: Characters considered part of a word when double clicking. In
#: addition to these characters any character that is marked as an
#: alphanumeric character in the unicode database will be matched.

# select_by_word_characters :@-./_~?&=%+#

#: The interval between successive clicks to detect double/triple
#: clicks (in seconds). Negative numbers will use the system default
#: instead, if available, or fallback to 0.5.

# click_interval -1.0

#: Set the active window to the window under the mouse when moving the
#: mouse around

# focus_follows_mouse no

#: The shape of the mouse pointer when the program running in the
#: terminal grabs the mouse.

# pointer_shape_when_grabbed arrow

#: }}}

#: Performance tuning {{{

#: Delay (in milliseconds) between screen updates. Decreasing it,
#: increases frames-per-second (FPS) at the cost of more CPU usage.
#: The default value yields ~100 FPS which is more than sufficient for
#: most uses. Note that to actually achieve 100 FPS you have to either
#: set sync_to_monitor to no or use a monitor with a high refresh
#: rate. Also, to minimize latency when there is pending input to be
#: processed, repaint_delay is ignored.

# repaint_delay 10

#: Delay (in milliseconds) before input from the program running in
#: the terminal is processed. Note that decreasing it will increase
#: responsiveness, but also increase CPU usage and might cause flicker
#: in full screen programs that redraw the entire screen on each loop,
#: because kitty is so fast that partial screen updates will be drawn.

input_delay 0

#: Sync screen updates to the refresh rate of the monitor. This
#: prevents tearing (https://en.wikipedia.org/wiki/Screen_tearing)
#: when scrolling. However, it limits the rendering speed to the
#: refresh rate of your monitor. With a very high speed mouse/high
#: keyboard repeat rate, you may notice some slight input latency. If
#: so, set this to no.

# sync_to_monitor yes

#: }}}

#: Terminal bell {{{

#: Enable/disable the audio bell. Useful in environments that require
#: silence.

enable_audio_bell no

#: Visual bell duration. Flash the screen when a bell occurs for the
#: specified number of seconds. Set to zero to disable.

visual_bell_duration 0.0

#: Request window attention on bell. Makes the dock icon bounce on
#: macOS or the taskbar flash on linux.

window_alert_on_bell no

#: Show a bell symbol on the tab if a bell occurs in one of the
#: windows in the tab and the window is not the currently focused
#: window

bell_on_tab no

#: Program to run when a bell occurs.

command_on_bell none

#: }}}

#: Window layout {{{

#: If enabled, the window size will be remembered so that new
#: instances of kitty will have the same size as the previous
#: instance. If disabled, the window will initially have size
#: configured by initial_window_width/height, in pixels. You can use a
#: suffix of "c" on the width/height values to have them interpreted
#: as number of cells instead of pixels.

remember_window_size yes
# initial_window_width  640
# initial_window_height 400

#: The enabled window layouts. A comma separated list of layout names.
#: The special value all means all layouts. The first listed layout
#: will be used as the startup layout. For a list of available
#: layouts, see the
#: https://sw.kovidgoyal.net/kitty/index.html#layouts.

# enabled_layouts *

#: The step size (in units of cell width/cell height) to use when
#: resizing windows. The cells value is used for horizontal resizing
#: and the lines value for vertical resizing.

# window_resize_step_cells 2
# window_resize_step_lines 2

#: The width (in pts) of window borders. Will be rounded to the
#: nearest number of pixels based on screen resolution. Note that
#: borders are displayed only when more than one window is visible.
#: They are meant to separate multiple windows.

# window_border_width 1.0

#: Draw only the minimum borders needed. This means that only the
#: minimum needed borders for inactive windows are drawn. That is only
#: the borders that separate the inactive window from a neighbor. Note
#: that setting a non-zero window margin overrides this and causes all
#: borders to be drawn.

# draw_minimal_borders yes

#: The window margin (in pts) (blank area outside the border)

# window_margin_width 0.0

#: The window margin (in pts) to use when only a single window is
#: visible. Negative values will cause the value of
#: window_margin_width to be used instead.

# single_window_margin_width -1000.0

#: The window padding (in pts) (blank area between the text and the
#: window border)

# window_padding_width 0.0

#: When the window size is not an exact multiple of the cell size, the
#: cell area of the terminal window will have some extra padding on
#: the sides. You can control how that padding is distributed with
#: this option. Using a value of center means the cell area will be
#: placed centrally. A value of top-left means the padding will be on
#: only the bottom and right edges.

# placement_strategy center

#: The color for the border of the active window. Set this to none to
#: not draw borders around the active window.

# active_border_color #00ff00

#: The color for the border of inactive windows

# inactive_border_color #cccccc

#: The color for the border of inactive windows in which a bell has
#: occurred

# bell_border_color #ff5a00

#: Fade the text in inactive windows by the specified amount (a number
#: between zero and one, with zero being fully faded).

# inactive_text_alpha 1.0

#: Hide the window decorations (title-bar and window borders). Whether
#: this works and exactly what effect it has depends on the window
#: manager/operating system.

# hide_window_decorations no

#: The time (in seconds) to wait before redrawing the screen when a
#: resize event is received. On platforms such as macOS, where the
#: operating system sends events corresponding to the start and end of
#: a resize, this number is ignored.

# resize_debounce_time 0.1

#: Choose how kitty draws a window while a resize is in progress. A
#: value of static means draw the current window contents, mostly
#: unchanged. A value of scale means draw the current window contents
#: scaled. A value of blank means draw a blank window. A value of size
#: means show the window size in cells.

# resize_draw_strategy static

#: }}}

#: Color scheme {{{

#: The foreground and background colors

# foreground #dddddd
# background #000000

#: The opacity of the background. A number between 0 and 1, where 1 is
#: opaque and 0 is fully transparent.  This will only work if
#: supported by the OS (for instance, when using a compositor under
#: X11). Note that it only sets the default background color's
#: opacity. This is so that things like the status bar in vim,
#: powerline prompts, etc. still look good.  But it means that if you
#: use a color theme with a background color in your editor, it will
#: not be rendered as transparent.  Instead you should change the
#: default background color in your kitty config and not use a
#: background color in the editor color scheme. Or use the escape
#: codes to set the terminals default colors in a shell script to
#: launch your editor.  Be aware that using a value less than 1.0 is a
#: (possibly significant) performance hit.  If you want to dynamically
#: change transparency of windows set dynamic_background_opacity to
#: yes (this is off by default as it has a performance cost)

# background_opacity 1.0

#: Allow changing of the background_opacity dynamically, using either
#: keyboard shortcuts (increase_background_opacity and
#: decrease_background_opacity) or the remote control facility.

# dynamic_background_opacity no

#: How much to dim text that has the DIM/FAINT attribute set. One
#: means no dimming and zero means fully dimmed (i.e. invisible).

# dim_opacity 0.75

#: The foreground for text selected with the mouse. A value of none
#: means to leave the color unchanged.

# selection_foreground #000000

#: The background for text selected with the mouse.


# selection_background #fffacd

#: The 16 terminal colors. There are 8 basic colors, each color has a
#: dull and bright version. You can also set the remaining colors from
#: the 256 color table as color16 to color255.

#: black

# color0 #000000
# color8 #767676

#: red

# color1 #cc0403
# color9 #f2201f

#: green

# color2  #19cb00
# color10 #23fd00

#: yellow

# color3  #cecb00
# color11 #fffd00

#: blue

# color4  #0d73cc
# color12 #1a8fff

#: magenta

# color5  #cb1ed1
# color13 #fd28ff

#: cyan

# color6  #0dcdcd
# color14 #14ffff

#: white

# color7  #dddddd
# color15 #ffffff

#: }}}

#: Advanced {{{

#: The shell program to execute. The default value of . means to use
#: whatever shell is set as the default shell for the current user.
#: Note that on macOS if you change this, you might need to add
#: --login to ensure that the shell starts in interactive mode and
#: reads its startup rc files.

shell .

#: The console editor to use when editing the kitty config file or
#: similar tasks. A value of . means to use the environment variable
#: EDITOR. Note that this environment variable has to be set not just
#: in your shell startup scripts but system-wide, otherwise kitty will
#: not see it.

editor .

#: Close the window when the child process (shell) exits. If no (the
#: default), the terminal will remain open when the child exits as
#: long as there are still processes outputting to the terminal (for
#: example disowned or backgrounded processes). If yes, the window
#: will close as soon as the child process exits. Note that setting it
#: to yes means that any background processes still using the terminal
#: can fail silently because their stdout/stderr/stdin no longer work.

# close_on_child_death no

#: Allow other programs to control kitty. If you turn this on other
#: programs can control all aspects of kitty, including sending text
#: to kitty windows, opening new windows, closing windows, reading the
#: content of windows, etc. Note that this even works over ssh
#: connections.

# allow_remote_control no

#: Specify environment variables to set in all child processes. Note
#: that environment variables are expanded recursively, so if you
#: use:

# env

#: The value of MYVAR2 will be a/<path to home directory>/b.

#:     env MYVAR1=a
#:     env MYVAR2=${MYVAR1}/${HOME}/b

#: Periodically check if an update to kitty is available. If an update
#: is found a system notification is displayed informing you of the
#: available update. The default is to check every 24 hrs, set to zero
#: to disable.

# update_check_interval 0.0

#: Path to a session file to use for all kitty instances. Can be
#: overridden by using the kitty --session command line option for
#: individual instances. See
#: https://sw.kovidgoyal.net/kitty/index.html#sessions in the kitty
#: documentation for details. Note that relative paths are interpreted
#: with respect to the kitty config directory. Environment variables
#: in the path are expanded.

# startup_session none

#: Allow programs running in kitty to read and write from the
#: clipboard. You can control exactly which actions are allowed. The
#: set of possible actions is: write-clipboard read-clipboard write-
#: primary read-primary. You can additionally specify no-append to
#: disable kitty's protocol extension for clipboard concatenation. The
#: default is to allow writing to the clipboard and primary selection
#: with concatenation enabled. Note that enabling the read
#: functionality is a security risk as it means that any program, even
#: one running on a remote server via SSH can read your clipboard.

# clipboard_control write-clipboard write-primary

#: The value of the TERM environment variable to set. Changing this
#: can break many terminal programs, only change it if you know what
#: you are doing, not because you read some advice on Stack Overflow
#: to change it. The TERM variable is used by various programs to get
#: information about the capabilities and behavior of the terminal. If
#: you change it, depending on what programs you run, and how
#: different the terminal you are changing it to is, various things
#: from key-presses, to colors, to various advanced features may not
#: work.

# term xterm-kitty

term xterm-256color

#: }}}

#: Keyboard shortcuts {{{

#: For a list of key names, see: GLFW keys
#: <https://www.glfw.org/docs/latest/group__keys.html>. The name to
#: use is the part after the GLFW_KEY_ prefix. For a list of modifier
#: names, see: GLFW mods
#: <https://www.glfw.org/docs/latest/group__mods.html>

#: On Linux you can also use XKB key names to bind keys that are not
#: supported by GLFW. See XKB keys
#: <https://github.com/xkbcommon/libxkbcommon/blob/master/xkbcommon/xkbcommon-
#: keysyms.h> for a list of key names. The name to use is the part
#: after the XKB_KEY_ prefix. Note that you should only use an XKB key
#: name for keys that are not present in the list of GLFW keys.

#: You can use the special action no_op to unmap a keyboard shortcut
#: that is assigned in the default configuration:

#:     map kitty_mod+space no_op

#: You can combine multiple actions to be triggered by a single
#: shortcut, using the syntax below:

#:     map key combine <separator> action1 <separator> action2 <separator> action3 ...

#: For example:

#:     map kitty_mod+e combine : new_window : next_layout

#: this will create a new window and switch to the next available
#: layout

#: You can use multi-key shortcuts using the syntax shown below:

#:     map key1>key2>key3 action

#: For example:

#:     map ctrl+f>2 set_font_size 20

#: The value of kitty_mod is used as the modifier for all default
#: shortcuts, you can change it in your kitty.conf to change the
#: modifiers for all the default shortcuts.

kitty_mod ctrl+shift

#: You can have kitty remove all shortcut definition seen up to this
#: point. Useful, for instance, to remove the default shortcuts.

clear_all_shortcuts yes

#: You can create aliases for kitten names, this allows overriding the
#: defaults for kitten options and can also be used to shorten
#: repeated mappings of the same kitten with a specific group of
#: options. For example, the above alias changes the default value of
#: kitty +kitten hints --hints-offset to zero for all mappings,
#: including the builtin ones.

# kitten_alias hints hints --hints-offset=0

#: Clipboard {{{

map kitty_mod+c copy_to_clipboard

#: There is also a copy_or_interrupt action that can be optionally
#: mapped to Ctrl+c. It will copy only if there is a selection and
#: send an interrupt otherwise.

map kitty_mod+v  paste_from_clipboard
map shift+insert paste_from_selection

#: }}}

#: Font sizes {{{

#: You can change the font size for all top-level kitty OS windows at
#: a time or only the current one.

map kitty_mod+equal     change_font_size all +1.0
map kitty_mod+minus     change_font_size all -1.0
map kitty_mod+backspace change_font_size all 0

#: }}}

#: Select and act on visible text {{{

#: Use the hints kitten to select text and either pass it to an
#: external program or insert it into the terminal or copy it to the
#: clipboard.

#: Open a currently visible URL using the keyboard. The program used
#: to open the URL is specified in open_url_with.

map kitty_mod+e kitten hints

#: Select a path/filename and insert it into the terminal. Useful, for
#: instance to run git commands on a filename output from a previous
#: git command.

map kitty_mod+p>f kitten hints --type path --program -

#: Select a path/filename and open it with the default open program.

map kitty_mod+p>shift+f kitten hints --type path

#: Select a line of text and insert it into the terminal. Use for the
#: output of things like: ls -1

map kitty_mod+p>l kitten hints --type line --program -

#: Select something that looks like a hash and insert it into the
#: terminal. Useful with git, which uses sha1 hashes to identify
#: commits

map kitty_mod+p>h kitten hints --type hash --program -

#: The hints kitten has many more modes of operation that you can map
#: to different shortcuts. For a full description see kittens/hints.

#: }}}

#: Miscellaneous {{{

map kitty_mod+u      kitten unicode_input
map kitty_mod+escape kitty_shell window
# map kitty_mod+f11    toggle_fullscreen
# map kitty_mod+f10    toggle_maximized
# map kitty_mod+f2     edit_config_file

# map kitty_mod+a>m    set_background_opacity +0.1
# map kitty_mod+a>l    set_background_opacity -0.1
# map kitty_mod+a>1    set_background_opacity 1
# map kitty_mod+a>d    set_background_opacity default
# map kitty_mod+delete clear_terminal reset active

#: }}}

#: }}}
